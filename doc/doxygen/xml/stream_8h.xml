<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="stream_8h" kind="file" language="C++">
    <compoundname>stream.h</compoundname>
    <includes local="no">concepts</includes>
    <includes local="no">array</includes>
    <includes local="no">span</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">ranges</includes>
    <includes local="no">iterator</includes>
    <includes refid="read_8h" local="no">file/read.h</includes>
    <includes local="no">string</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes local="no">unicode/type.h</includes>
    <includes local="no">memory</includes>
    <includes local="no">bit</includes>
    <includes local="no">file/export.h</includes>
    <includes refid="type_8h" local="no">file/type.h</includes>
    <includes refid="error_8h" local="no">file/error.h</includes>
    <incdepgraph>
      <node id="16">
        <label>file/error.h</label>
        <link refid="error_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>file/read.h</label>
        <link refid="read_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/file/stream.h</label>
        <link refid="stream_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>file/type.h</label>
        <link refid="type_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>algorithm</label>
      </node>
      <node id="3">
        <label>array</label>
      </node>
      <node id="22">
        <label>bit</label>
      </node>
      <node id="15">
        <label>cerrno</label>
      </node>
      <node id="2">
        <label>concepts</label>
      </node>
      <node id="5">
        <label>cstdint</label>
      </node>
      <node id="14">
        <label>cstring</label>
      </node>
      <node id="17">
        <label>exception/error.h</label>
      </node>
      <node id="23">
        <label>file/export.h</label>
      </node>
      <node id="13">
        <label>fstream</label>
      </node>
      <node id="8">
        <label>iterator</label>
      </node>
      <node id="11">
        <label>memory</label>
      </node>
      <node id="7">
        <label>ranges</label>
      </node>
      <node id="4">
        <label>span</label>
      </node>
      <node id="18">
        <label>string</label>
      </node>
      <node id="19">
        <label>type_traits</label>
      </node>
      <node id="21">
        <label>unicode/type.h</label>
      </node>
      <node id="20">
        <label>utility</label>
      </node>
      <node id="12">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="structFile_1_1Serialiser" prot="public">File::Serialiser</innerclass>
    <innerclass refid="structFile_1_1Deserialiser" prot="public">File::Deserialiser</innerclass>
    <innerclass refid="classFile_1_1StreamError" prot="public">File::StreamError</innerclass>
    <innerclass refid="structFile_1_1StreamReadFailure" prot="public">File::StreamReadFailure</innerclass>
    <innerclass refid="structFile_1_1Detail_1_1Concept_1_1Vector__Struct" prot="public">File::Detail::Concept::Vector_Struct</innerclass>
    <innerclass refid="structFile_1_1Detail_1_1Concept_1_1Vector__Struct_3_01std_1_1vector_3_01T_01_4_01_4" prot="public">File::Detail::Concept::Vector_Struct&lt; std::vector&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structFile_1_1Detail_1_1Concept_1_1String__Struct" prot="public">File::Detail::Concept::String_Struct</innerclass>
    <innerclass refid="structFile_1_1Detail_1_1Concept_1_1String__Struct_3_01std_1_1basic__string_3_01T_01_4_01_4" prot="public">File::Detail::Concept::String_Struct&lt; std::basic_string&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structFile_1_1Detail_1_1Concept_1_1Array__Struct" prot="public">File::Detail::Concept::Array_Struct</innerclass>
    <innerclass refid="structFile_1_1Detail_1_1Concept_1_1Array__Struct_3_01std_1_1array_3_01T_00_01S_01_4_01_4" prot="public">File::Detail::Concept::Array_Struct&lt; std::array&lt; T, S &gt; &gt;</innerclass>
    <innerclass refid="structFile_1_1Detail_1_1Concept_1_1Span__Struct" prot="public">File::Detail::Concept::Span_Struct</innerclass>
    <innerclass refid="structFile_1_1Detail_1_1Concept_1_1Span__Struct_3_01std_1_1span_3_01T_01_4_01_4" prot="public">File::Detail::Concept::Span_Struct&lt; std::span&lt; T &gt; &gt;</innerclass>
    <innerclass refid="classFile_1_1Stream" prot="public">File::Stream</innerclass>
    <innernamespace refid="namespaceFile">File</innernamespace>
    <innernamespace refid="namespaceFile_1_1Detail">File::Detail</innernamespace>
    <innernamespace refid="namespaceFile_1_1Detail_1_1Concept">File::Detail::Concept</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;concepts&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;span&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ranges&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="read_8h" kindref="compound">file/read.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unicode/type.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;bit&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;file/export.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="type_8h" kindref="compound">file/type.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="error_8h" kindref="compound">file/error.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceFile" kindref="compound">File</ref><sp/>{</highlight></codeline>
<codeline lineno="29" refid="namespaceFile_1a61e2697173136ada4e112bade4fbfa77" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespaceFile_1a61e2697173136ada4e112bade4fbfa77" kindref="member">ByteSpan</ref><sp/>=<sp/>std::span&lt;const<sp/>Byte&gt;;</highlight></codeline>
<codeline lineno="43" refid="namespaceFile_1aef8a42b3ab2cd380273518b701b15e8d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="namespaceFile_1aef8a42b3ab2cd380273518b701b15e8d" kindref="member">Endian</ref><sp/>{</highlight></codeline>
<codeline lineno="44" refid="namespaceFile_1aef8a42b3ab2cd380273518b701b15e8dad491538da818a2ba11a3195ba035cfd3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespaceFile_1aef8a42b3ab2cd380273518b701b15e8dad491538da818a2ba11a3195ba035cfd3" kindref="member">Big</ref><sp/><sp/><sp/><sp/>=<sp/>std::to_underlying(std::endian::big),</highlight></codeline>
<codeline lineno="45" refid="namespaceFile_1aef8a42b3ab2cd380273518b701b15e8da0f9197b3e286a7522984831949087332" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespaceFile_1aef8a42b3ab2cd380273518b701b15e8da0f9197b3e286a7522984831949087332" kindref="member">Little</ref><sp/>=<sp/>std::to_underlying(std::endian::little),</highlight></codeline>
<codeline lineno="46" refid="namespaceFile_1aef8a42b3ab2cd380273518b701b15e8da925641e0b76c28cc940e8f3ca178d826" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespaceFile_1aef8a42b3ab2cd380273518b701b15e8da925641e0b76c28cc940e8f3ca178d826" kindref="member">Native</ref><sp/>=<sp/>std::to_underlying(std::endian::native)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;Endian<sp/>E&gt;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Stream;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>Endian<sp/>E&gt;</highlight></codeline>
<codeline lineno="68" refid="structFile_1_1Serialiser" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structFile_1_1Serialiser_1acfb48b75fc32afa4113130e2094eb003" kindref="member">Serialiser</ref><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="70" refid="structFile_1_1Serialiser_1aa805285a3739b4192c1d5e6c735fe948" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structFile_1_1Serialiser_1aa805285a3739b4192c1d5e6c735fe948" kindref="member">Target</ref><sp/>=<sp/>T;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="namespaceFile_1aef8a42b3ab2cd380273518b701b15e8d" kindref="member">Endian</ref><sp/><ref refid="structFile_1_1Serialiser_1af768af1740b3ff577c483d57bfd58cc2" kindref="member">UsedEndian</ref><sp/>=<sp/>E;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="structFile_1_1Serialiser_1acfb48b75fc32afa4113130e2094eb003" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structFile_1_1Serialiser_1acfb48b75fc32afa4113130e2094eb003" kindref="member">Serialiser</ref>(</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structFile_1_1Serialiser_1aa805285a3739b4192c1d5e6c735fe948" kindref="member">Target</ref><sp/>&amp;target,<sp/><ref refid="classFile_1_1Stream" kindref="compound">Stream&lt;UsedEndian&gt;</ref><sp/>&amp;stream</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Serialiser<sp/>not<sp/>implemented&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal">};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>Endian<sp/>E&gt;</highlight></codeline>
<codeline lineno="90" refid="structFile_1_1Deserialiser" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structFile_1_1Deserialiser_1af3781fcfc451dbb19a7c224f5a766bd9" kindref="member">Deserialiser</ref><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="92" refid="structFile_1_1Deserialiser_1a9cb6c0916594a3bf59f1d878e76ad4d2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structFile_1_1Deserialiser_1a9cb6c0916594a3bf59f1d878e76ad4d2" kindref="member">Target</ref><sp/>=<sp/>T;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="namespaceFile_1aef8a42b3ab2cd380273518b701b15e8d" kindref="member">Endian</ref><sp/><ref refid="structFile_1_1Deserialiser_1a4ae703228b3fbcbfc817040c103f62e0" kindref="member">UsedEndian</ref><sp/>=<sp/>E;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="structFile_1_1Deserialiser_1af3781fcfc451dbb19a7c224f5a766bd9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structFile_1_1Deserialiser_1af3781fcfc451dbb19a7c224f5a766bd9" kindref="member">Deserialiser</ref>(</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structFile_1_1Deserialiser_1a9cb6c0916594a3bf59f1d878e76ad4d2" kindref="member">Target</ref><sp/>&amp;target,<sp/><ref refid="classFile_1_1Stream" kindref="compound">Stream&lt;UsedEndian&gt;</ref><sp/>&amp;stream</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Deserialiser<sp/>not<sp/>implemented&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal">};</highlight></codeline>
<codeline lineno="100" refid="classFile_1_1StreamError" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classFile_1_1StreamError_1a355dfd1a7d5ad3de0bb6a9bff83602af" kindref="member">StreamError</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classFile_1_1Error_1af349939934578319f507885d445bc639" kindref="member">Error</ref><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="102" refid="classFile_1_1StreamError_1a355dfd1a7d5ad3de0bb6a9bff83602af" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classFile_1_1StreamError_1a355dfd1a7d5ad3de0bb6a9bff83602af" kindref="member">StreamError</ref>(</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;message</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>)<sp/>:<sp/><ref refid="classFile_1_1Error_1af349939934578319f507885d445bc639" kindref="member">Error</ref>(Namespace(</highlight><highlight class="stringliteral">&quot;StreamError&quot;</highlight><highlight class="normal">,<sp/>message))<sp/>{}<sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal">};</highlight></codeline>
<codeline lineno="107" refid="structFile_1_1StreamReadFailure" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structFile_1_1StreamReadFailure_1ac1468fe35e4205a643f6c766f193b1ad" kindref="member">StreamReadFailure</ref><sp/>:<sp/><ref refid="classFile_1_1StreamError_1a355dfd1a7d5ad3de0bb6a9bff83602af" kindref="member">StreamError</ref><sp/>{</highlight></codeline>
<codeline lineno="108" refid="structFile_1_1StreamReadFailure_1ac1468fe35e4205a643f6c766f193b1ad" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structFile_1_1StreamReadFailure_1ac1468fe35e4205a643f6c766f193b1ad" kindref="member">StreamReadFailure</ref>(</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;message<sp/></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>)<sp/>:<sp/><ref refid="classFile_1_1StreamError_1a355dfd1a7d5ad3de0bb6a9bff83602af" kindref="member">StreamError</ref>(Message(</highlight><highlight class="stringliteral">&quot;ReadFailure&quot;</highlight><highlight class="normal">,<sp/>message))<sp/>{}</highlight></codeline>
<codeline lineno="112"><highlight class="normal">};</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="114" refid="namespaceFile_1_1Detail_1_1Concept" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceFile_1_1Detail_1_1Concept" kindref="compound">Concept</ref><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="120" refid="conceptFile_1_1Detail_1_1Concept_1_1Simple" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="conceptFile_1_1Detail_1_1Concept_1_1Simple" kindref="compound">Simple</ref><sp/>=<sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>std::is_integral_v<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;T&gt;<sp/>||</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>std::is_floating_point_v<sp/>&lt;T&gt;;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="125" refid="structFile_1_1Detail_1_1Concept_1_1Vector__Struct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structFile_1_1Detail_1_1Concept_1_1Vector__Struct" kindref="compound">Vector_Struct</ref><sp/></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="129" refid="structFile_1_1Detail_1_1Concept_1_1Vector__Struct_3_01std_1_1vector_3_01T_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structFile_1_1Detail_1_1Concept_1_1Vector__Struct" kindref="compound">Vector_Struct</ref>&lt;std::vector&lt;T&gt;&gt;<sp/></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="136" refid="conceptFile_1_1Detail_1_1Concept_1_1Vector" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="conceptFile_1_1Detail_1_1Concept_1_1Vector" kindref="compound">Vector</ref><sp/>=<sp/><ref refid="structFile_1_1Detail_1_1Concept_1_1Vector__Struct" kindref="compound">Vector_Struct&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="139" refid="structFile_1_1Detail_1_1Concept_1_1String__Struct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structFile_1_1Detail_1_1Concept_1_1String__Struct" kindref="compound">String_Struct</ref><sp/></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="143" refid="structFile_1_1Detail_1_1Concept_1_1String__Struct_3_01std_1_1basic__string_3_01T_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structFile_1_1Detail_1_1Concept_1_1String__Struct" kindref="compound">String_Struct</ref>&lt;std::basic_string&lt;T&gt;&gt;<sp/></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="150" refid="conceptFile_1_1Detail_1_1Concept_1_1String" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="conceptFile_1_1Detail_1_1Concept_1_1String" kindref="compound">String</ref><sp/>=<sp/><ref refid="structFile_1_1Detail_1_1Concept_1_1String__Struct" kindref="compound">String_Struct&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="153" refid="structFile_1_1Detail_1_1Concept_1_1Array__Struct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structFile_1_1Detail_1_1Concept_1_1Array__Struct" kindref="compound">Array_Struct</ref><sp/></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>std::u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">64_t<sp/>S&gt;</highlight></codeline>
<codeline lineno="157" refid="structFile_1_1Detail_1_1Concept_1_1Array__Struct_3_01std_1_1array_3_01T_00_01S_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structFile_1_1Detail_1_1Concept_1_1Array__Struct" kindref="compound">Array_Struct</ref>&lt;std::array&lt;T,<sp/>S&gt;&gt;<sp/></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="164" refid="conceptFile_1_1Detail_1_1Concept_1_1Array" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="conceptFile_1_1Detail_1_1Concept_1_1Array" kindref="compound">Array</ref><sp/>=<sp/><ref refid="structFile_1_1Detail_1_1Concept_1_1Array__Struct" kindref="compound">Array_Struct&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="167" refid="structFile_1_1Detail_1_1Concept_1_1Span__Struct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structFile_1_1Detail_1_1Concept_1_1Span__Struct" kindref="compound">Span_Struct</ref><sp/></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="171" refid="structFile_1_1Detail_1_1Concept_1_1Span__Struct_3_01std_1_1span_3_01T_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structFile_1_1Detail_1_1Concept_1_1Span__Struct" kindref="compound">Span_Struct</ref>&lt;std::span&lt;T&gt;&gt;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="178" refid="conceptFile_1_1Detail_1_1Concept_1_1Span" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="conceptFile_1_1Detail_1_1Concept_1_1Span" kindref="compound">Span</ref><sp/>=<sp/><ref refid="structFile_1_1Detail_1_1Concept_1_1Span__Struct" kindref="compound">Span_Struct&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="184" refid="conceptFile_1_1Detail_1_1Concept_1_1Iterable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="conceptFile_1_1Detail_1_1Concept_1_1Iterable" kindref="compound">Iterable</ref><sp/>=<sp/></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>Vector<sp/>&lt;T&gt;<sp/>||<sp/></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>String<sp/>&lt;T&gt;<sp/>||<sp/></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>Array<sp/><sp/>&lt;T&gt;<sp/>||<sp/></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>Span<sp/><sp/><sp/>&lt;T&gt;;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="191" refid="conceptFile_1_1Detail_1_1Concept_1_1HasTarget" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="conceptFile_1_1Detail_1_1Concept_1_1HasTarget" kindref="compound">HasTarget</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::Target;</highlight></codeline>
<codeline lineno="193"><highlight class="normal">};</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="195" refid="conceptFile_1_1Detail_1_1Concept_1_1HasUsedEndian" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="conceptFile_1_1Detail_1_1Concept_1_1HasUsedEndian" kindref="compound">HasUsedEndian</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>T::UsedEndian;</highlight></codeline>
<codeline lineno="197"><highlight class="normal">};</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="199" refid="conceptFile_1_1Detail_1_1Concept_1_1SerialiserHasConstructor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="conceptFile_1_1Detail_1_1Concept_1_1SerialiserHasConstructor" kindref="compound">SerialiserHasConstructor</ref><sp/>=<sp/></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>HasTarget<sp/><sp/><sp/><sp/><sp/>&lt;T&gt;<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>HasUsedEndian<sp/>&lt;T&gt;<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T::Target<sp/>&amp;target,<sp/><ref refid="classFile_1_1Stream" kindref="compound">Stream&lt;T::UsedEndian&gt;</ref><sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>T(target,<sp/>stream);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>A&gt;</highlight></codeline>
<codeline lineno="206" refid="conceptFile_1_1Detail_1_1Concept_1_1HasFunctionOperator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="conceptFile_1_1Detail_1_1Concept_1_1HasFunctionOperator" kindref="compound">HasFunctionOperator</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(T<sp/>input,<sp/>A...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>{<sp/>input(args...)<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;void&gt;;</highlight></codeline>
<codeline lineno="208"><highlight class="normal">};</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>A&gt;</highlight></codeline>
<codeline lineno="210" refid="conceptFile_1_1Detail_1_1Concept_1_1SerialiserImpl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="conceptFile_1_1Detail_1_1Concept_1_1SerialiserImpl" kindref="compound">SerialiserImpl</ref><sp/>=<sp/></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>SerialiserHasConstructor<sp/>&lt;T&gt;<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><ref refid="conceptFile_1_1Detail_1_1Concept_1_1HasFunctionOperator" kindref="compound">HasFunctionOperator</ref><sp/><sp/><sp/><sp/><sp/><sp/>&lt;T,<sp/>A...&gt;;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/><ref refid="namespaceFile_1aef8a42b3ab2cd380273518b701b15e8d" kindref="member">Endian</ref><sp/>E,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>A&gt;</highlight></codeline>
<codeline lineno="215" refid="conceptFile_1_1Detail_1_1Concept_1_1HasInternalSerialiserImpl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="conceptFile_1_1Detail_1_1Concept_1_1HasInternalSerialiserImpl" kindref="compound">HasInternalSerialiserImpl</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{<sp/></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/><ref refid="conceptFile_1_1Detail_1_1Concept_1_1SerialiserImpl" kindref="compound">SerialiserImpl&lt;typename T::template Serialiser&lt;E&gt;</ref>,<sp/>A...&gt;;</highlight></codeline>
<codeline lineno="217"><highlight class="normal">};</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/><ref refid="namespaceFile_1aef8a42b3ab2cd380273518b701b15e8d" kindref="member">Endian</ref><sp/>E,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>A&gt;</highlight></codeline>
<codeline lineno="219" refid="conceptFile_1_1Detail_1_1Concept_1_1HasExternalSerialiserImpl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="conceptFile_1_1Detail_1_1Concept_1_1HasExternalSerialiserImpl" kindref="compound">HasExternalSerialiserImpl</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/><ref refid="conceptFile_1_1Detail_1_1Concept_1_1SerialiserImpl" kindref="compound">SerialiserImpl&lt;Serialiser&lt;T, E&gt;</ref>,<sp/>A...&gt;;</highlight></codeline>
<codeline lineno="221"><highlight class="normal">};</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="223" refid="conceptFile_1_1Detail_1_1Concept_1_1DeserialiserHasConstructor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="conceptFile_1_1Detail_1_1Concept_1_1DeserialiserHasConstructor" kindref="compound">DeserialiserHasConstructor</ref><sp/>=<sp/></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>HasTarget<sp/><sp/><sp/><sp/><sp/>&lt;T&gt;<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>HasUsedEndian<sp/>&lt;T&gt;<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(T::Target<sp/>&amp;target,<sp/><ref refid="classFile_1_1Stream" kindref="compound">Stream&lt;T::UsedEndian&gt;</ref><sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>T(target,<sp/>stream);<sp/></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>A&gt;</highlight></codeline>
<codeline lineno="230" refid="conceptFile_1_1Detail_1_1Concept_1_1DeserialiserImpl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="conceptFile_1_1Detail_1_1Concept_1_1DeserialiserImpl" kindref="compound">DeserialiserImpl</ref><sp/>=<sp/></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>DeserialiserHasConstructor<sp/>&lt;T&gt;<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><ref refid="conceptFile_1_1Detail_1_1Concept_1_1HasFunctionOperator" kindref="compound">HasFunctionOperator</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;T,<sp/>A...&gt;;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/><ref refid="namespaceFile_1aef8a42b3ab2cd380273518b701b15e8d" kindref="member">Endian</ref><sp/>E,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>A&gt;</highlight></codeline>
<codeline lineno="235" refid="conceptFile_1_1Detail_1_1Concept_1_1HasInternalDeserialiserImpl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="conceptFile_1_1Detail_1_1Concept_1_1HasInternalDeserialiserImpl" kindref="compound">HasInternalDeserialiserImpl</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{<sp/></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/><ref refid="conceptFile_1_1Detail_1_1Concept_1_1DeserialiserImpl" kindref="compound">DeserialiserImpl&lt;typename T::template Deserialiser&lt;E&gt;</ref>,<sp/>A...&gt;;</highlight></codeline>
<codeline lineno="237"><highlight class="normal">};</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/><ref refid="namespaceFile_1aef8a42b3ab2cd380273518b701b15e8d" kindref="member">Endian</ref><sp/>E,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>A&gt;</highlight></codeline>
<codeline lineno="239" refid="conceptFile_1_1Detail_1_1Concept_1_1HasExternalDeserialiserImpl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="conceptFile_1_1Detail_1_1Concept_1_1HasExternalDeserialiserImpl" kindref="compound">HasExternalDeserialiserImpl</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/><ref refid="conceptFile_1_1Detail_1_1Concept_1_1DeserialiserImpl" kindref="compound">DeserialiserImpl&lt;Deserialiser&lt;T, E&gt;</ref>,<sp/>A...&gt;;</highlight></codeline>
<codeline lineno="241"><highlight class="normal">};</highlight></codeline>
<codeline lineno="242"><highlight class="normal">};</highlight></codeline>
<codeline lineno="243"><highlight class="normal">};</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;Endian<sp/>E<sp/>=<sp/>Endian::Native&gt;<sp/></highlight></codeline>
<codeline lineno="245" refid="classFile_1_1Stream" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classFile_1_1Stream_1a2ae56a895d6e91c9e40fea8af3d3a789" kindref="member">Stream</ref><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="250" refid="classFile_1_1Stream_1acde58f4d92fc8bd8661b6bb015276ee7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="namespaceFile_1aef8a42b3ab2cd380273518b701b15e8d" kindref="member">Endian</ref><sp/><ref refid="classFile_1_1Stream_1acde58f4d92fc8bd8661b6bb015276ee7" kindref="member">UsedEndian</ref><sp/>=<sp/>E;</highlight></codeline>
<codeline lineno="256" refid="classFile_1_1Stream_1a2ae56a895d6e91c9e40fea8af3d3a789" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classFile_1_1Stream_1a2ae56a895d6e91c9e40fea8af3d3a789" kindref="member">Stream</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262" refid="classFile_1_1Stream_1a27c67ca23d14794ce2d091ff99112c82" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classFile_1_1Stream_1a27c67ca23d14794ce2d091ff99112c82" kindref="member">Stream</ref>(<ref refid="namespaceFile_1aaa657f08e5829038ef1ecca83936eb67" kindref="member">ByteSequence</ref><sp/>data)<sp/>:<sp/>data_(std::make_shared&lt;<ref refid="namespaceFile_1aaa657f08e5829038ef1ecca83936eb67" kindref="member">ByteSequence</ref>&gt;(std::move(data)))<sp/>{}</highlight></codeline>
<codeline lineno="270" refid="classFile_1_1Stream_1a8208cd5ce51395388ee51725b35650df" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classFile_1_1Stream_1a8208cd5ce51395388ee51725b35650df" kindref="member">Stream</ref>(</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>)<sp/>:<sp/>data_(new<sp/><ref refid="namespaceFile_1aaa657f08e5829038ef1ecca83936eb67" kindref="member">ByteSequence</ref>(std::move(<ref refid="namespaceFile" kindref="compound">File</ref>::<ref refid="classFile_1_1Stream_1a3ff83d551519265b23d953df8032b8eb" kindref="member">Read</ref>(filename))))<sp/>{}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>A&gt;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/><ref refid="conceptFile_1_1Detail_1_1Concept_1_1HasInternalDeserialiserImpl" kindref="compound">Detail::Concept::HasInternalDeserialiserImpl</ref>&lt;T,<sp/><ref refid="classFile_1_1Stream_1acde58f4d92fc8bd8661b6bb015276ee7" kindref="member">UsedEndian</ref>,<sp/>A...&gt;<sp/>||<sp/></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="conceptFile_1_1Detail_1_1Concept_1_1HasExternalDeserialiserImpl" kindref="compound">Detail::Concept::HasExternalDeserialiserImpl</ref>&lt;T,<sp/><ref refid="classFile_1_1Stream_1acde58f4d92fc8bd8661b6bb015276ee7" kindref="member">UsedEndian</ref>,<sp/>A...&gt;</highlight></codeline>
<codeline lineno="326" refid="classFile_1_1Stream_1a3ff83d551519265b23d953df8032b8eb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/><ref refid="classFile_1_1Stream_1a3ff83d551519265b23d953df8032b8eb" kindref="member">Read</ref>(A&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classFile_1_1Stream_1a6447dbb7e92159a11dae90b639caa020" kindref="member">Read</ref>(T(),<sp/>std::forward&lt;A&gt;(args)...);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;Detail::Concept::Simple<sp/>Simple&gt;<sp/></highlight></codeline>
<codeline lineno="338" refid="classFile_1_1Stream_1a6447dbb7e92159a11dae90b639caa020" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Simple<sp/><ref refid="classFile_1_1Stream_1a6447dbb7e92159a11dae90b639caa020" kindref="member">Read</ref>()<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::ranges::distance(current_,<sp/>data_-&gt;end())<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Simple))<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="structFile_1_1StreamReadFailure" kindref="compound">StreamReadFailure</ref>(</highlight><highlight class="stringliteral">&quot;Insufficient<sp/>data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>Simple<sp/>simple;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="classFile_1_1Stream_1acde58f4d92fc8bd8661b6bb015276ee7" kindref="member">UsedEndian</ref><sp/>!=<sp/><ref refid="namespaceFile_1aef8a42b3ab2cd380273518b701b15e8da925641e0b76c28cc940e8f3ca178d826" kindref="member">Endian::Native</ref>)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::ranges::reverse_copy(</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::span(current_,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Simple)),<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="namespaceFile_1ae0165bddbfc987f33baa2bb72a4ccaab" kindref="member">Byte</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;simple)</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::ranges::copy(</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::span(current_,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(simple)),<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="namespaceFile_1ae0165bddbfc987f33baa2bb72a4ccaab" kindref="member">Byte</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;simple)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>current_<sp/>=<sp/>std::ranges::next(current_,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(simple));</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>simple;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;Detail::Concept::Iterable<sp/>Iterable&gt;</highlight></codeline>
<codeline lineno="365" refid="classFile_1_1Stream_1aafbea46de84b9ab3822d0c1246ba2623" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Iterable<sp/><ref refid="classFile_1_1Stream_1aafbea46de84b9ab3822d0c1246ba2623" kindref="member">Read</ref>(Iterable<sp/>&amp;&amp;iterable)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="conceptFile_1_1Detail_1_1Concept_1_1Simple" kindref="compound">Detail::Concept::Simple&lt;std::ranges::range_value_t&lt;Iterable&gt;</ref>&gt;,</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Elements<sp/>of<sp/>Iterable<sp/>must<sp/>satisfy<sp/>Detail::Concept::Simple&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;element<sp/>:<sp/>iterable)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>element<sp/>=<sp/><ref refid="classFile_1_1Stream_1a3ff83d551519265b23d953df8032b8eb" kindref="member">Read&lt;std::ranges::range_value_t&lt;Iterable&gt;</ref>&gt;();</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;Iterable&gt;(iterable);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;Detail::Concept::String<sp/>String&gt;</highlight></codeline>
<codeline lineno="383" refid="classFile_1_1Stream_1a623f867e1663398244e3262dcae808e6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>String<sp/><ref refid="classFile_1_1Stream_1a623f867e1663398244e3262dcae808e6" kindref="member">Read</ref>(std::uint64_t<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classFile_1_1Stream_1a6447dbb7e92159a11dae90b639caa020" kindref="member">Read</ref>(String(length,<sp/>0));</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;Detail::Concept::Vector<sp/>Vector&gt;</highlight></codeline>
<codeline lineno="394" refid="classFile_1_1Stream_1ab026dca918f00ac9e6d6f3aa7e63d068" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Vector<sp/><ref refid="classFile_1_1Stream_1ab026dca918f00ac9e6d6f3aa7e63d068" kindref="member">Read</ref>(std::uint64_t<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classFile_1_1Stream_1a6447dbb7e92159a11dae90b639caa020" kindref="member">Read</ref>(Vector(length));</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;Detail::Concept::Array<sp/>Array&gt;<sp/></highlight></codeline>
<codeline lineno="404" refid="classFile_1_1Stream_1a93e767e6801ac025ebcf85dce6c500e1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Array<sp/><ref refid="classFile_1_1Stream_1a93e767e6801ac025ebcf85dce6c500e1" kindref="member">Read</ref>()<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classFile_1_1Stream_1a6447dbb7e92159a11dae90b639caa020" kindref="member">Read</ref>(Array());</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;Detail::Concept::Span<sp/>Span&gt;<sp/></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::same_as&lt;Span,<sp/>ByteSpan&gt;</highlight></codeline>
<codeline lineno="415" refid="classFile_1_1Stream_1a34586a620f4dc9290c641dbc230dff72" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Span<sp/><ref refid="classFile_1_1Stream_1a34586a620f4dc9290c641dbc230dff72" kindref="member">Read</ref>(std::uint64_t<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Span(current_,<sp/>length);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;Detail::Concept::Simple<sp/>Simple&gt;</highlight></codeline>
<codeline lineno="425" refid="classFile_1_1Stream_1ad82d3b2fdf0c0b49c942a9040dfafe23" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classFile_1_1Stream_1ad82d3b2fdf0c0b49c942a9040dfafe23" kindref="member">Write</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Simple<sp/>&amp;simple)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>current_<sp/>=<sp/>std::ranges::next(</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_-&gt;begin(),<sp/>UpdateData&lt;Simple&gt;()</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="classFile_1_1Stream_1acde58f4d92fc8bd8661b6bb015276ee7" kindref="member">UsedEndian</ref><sp/>!=<sp/><ref refid="namespaceFile_1aef8a42b3ab2cd380273518b701b15e8da925641e0b76c28cc940e8f3ca178d826" kindref="member">Endian::Native</ref>)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_<sp/>=<sp/>std::ranges::reverse_copy(</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::span(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="namespaceFile_1ae0165bddbfc987f33baa2bb72a4ccaab" kindref="member">Byte</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;simple),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Simple)),<sp/>current_</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>).out;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_<sp/>=<sp/>std::ranges::copy(</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::span(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="namespaceFile_1ae0165bddbfc987f33baa2bb72a4ccaab" kindref="member">Byte</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;simple),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Simple)),<sp/>current_</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>).out;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;Detail::Concept::Iterable<sp/>Iterable&gt;</highlight></codeline>
<codeline lineno="448" refid="classFile_1_1Stream_1a4ca26708a076df559a225ad75c6be55b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classFile_1_1Stream_1a4ca26708a076df559a225ad75c6be55b" kindref="member">Write</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Iterable<sp/>&amp;iterable)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="conceptFile_1_1Detail_1_1Concept_1_1Simple" kindref="compound">Detail::Concept::Simple&lt;std::ranges::range_value_t&lt;Iterable&gt;</ref>&gt;,</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Elements<sp/>of<sp/>Iterable<sp/>must<sp/>satisfy<sp/>Detail::Concept::Simple&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;element<sp/>:<sp/>iterable)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classFile_1_1Stream_1ad82d3b2fdf0c0b49c942a9040dfafe23" kindref="member">Write</ref>(element);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Input,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>(<ref refid="conceptFile_1_1Detail_1_1Concept_1_1HasInternalSerialiserImpl" kindref="compound">Detail::Concept::HasInternalSerialiserImpl</ref>&lt;Input,<sp/><ref refid="classFile_1_1Stream_1acde58f4d92fc8bd8661b6bb015276ee7" kindref="member">UsedEndian</ref>,<sp/>Args...&gt;<sp/>||<sp/></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="conceptFile_1_1Detail_1_1Concept_1_1HasExternalSerialiserImpl" kindref="compound">Detail::Concept::HasExternalSerialiserImpl</ref>&lt;Input,<sp/><ref refid="classFile_1_1Stream_1acde58f4d92fc8bd8661b6bb015276ee7" kindref="member">UsedEndian</ref>,<sp/>Args...&gt;)</highlight></codeline>
<codeline lineno="504" refid="classFile_1_1Stream_1af4606e1b80626ec09a9d9631aff6f077" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classFile_1_1Stream_1af4606e1b80626ec09a9d9631aff6f077" kindref="member">Write</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Input<sp/>&amp;input,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classFile_1_1Stream_1ad82d3b2fdf0c0b49c942a9040dfafe23" kindref="member">Write</ref>(input);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="512" refid="classFile_1_1Stream_1a7a8c16424d8dbccaa5930761a5a79bd3" refkind="member"><highlight class="normal"><sp/><sp/>std::uint64_t<sp/><ref refid="classFile_1_1Stream_1a7a8c16424d8dbccaa5930761a5a79bd3" kindref="member">Tell</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::ranges::distance(</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_-&gt;begin(),<sp/>current_</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>);<sp/></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="528" refid="classFile_1_1Stream_1aa01093d0084e953531e9454381d1b60c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classFile_1_1Stream_1aa01093d0084e953531e9454381d1b60c" kindref="member">Reserve</ref>(std::uint64_t<sp/>input)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint64_t<sp/>offset<sp/>=<sp/>std::ranges::distance(</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_-&gt;begin(),<sp/>current_</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>data_-&gt;reserve(input);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>current_<sp/>=<sp/>std::ranges::next(</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_-&gt;begin(),<sp/>offset</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="537" refid="classFile_1_1Stream_1ab2fee215a8c3bf043e9f978b3d9efc92" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classFile_1_1Stream_1ab2fee215a8c3bf043e9f978b3d9efc92" kindref="member">Seek</ref>(std::uint64_t<sp/>offset)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>current_<sp/>=<sp/>std::ranges::next(</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_,<sp/>offset,<sp/>data_-&gt;end()</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="547" refid="classFile_1_1Stream_1a77d971a6a2418708ac79d1864ba1bff5" refkind="member"><highlight class="normal"><sp/><sp/>std::uint64_t<sp/><ref refid="classFile_1_1Stream_1a77d971a6a2418708ac79d1864ba1bff5" kindref="member">Length</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_-&gt;size();</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ByteSequence&gt;<sp/>data_<sp/>=<sp/>std::make_shared&lt;ByteSequence&gt;();</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>ByteSequence::iterator<sp/>current_<sp/>=<sp/>data_-&gt;begin();</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>A&gt;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/><ref refid="conceptFile_1_1Detail_1_1Concept_1_1HasInternalDeserialiserImpl" kindref="compound">Detail::Concept::HasInternalDeserialiserImpl</ref>&lt;T,<sp/><ref refid="classFile_1_1Stream_1acde58f4d92fc8bd8661b6bb015276ee7" kindref="member">UsedEndian</ref>,<sp/>A...&gt;<sp/></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/><ref refid="classFile_1_1Stream_1a6447dbb7e92159a11dae90b639caa020" kindref="member">Read</ref>(T<sp/>&amp;&amp;output,<sp/>A&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>T::template<sp/><ref refid="structFile_1_1Deserialiser" kindref="compound">Deserialiser&lt;UsedEndian&gt;</ref>(</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>)(std::forward&lt;A&gt;(args)...);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;T&gt;(output);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>A&gt;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>Detail::Concept::HasExternalDeserialiserImpl&lt;T,<sp/><ref refid="classFile_1_1Stream_1acde58f4d92fc8bd8661b6bb015276ee7" kindref="member">UsedEndian</ref>,<sp/>A...&gt;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/><ref refid="classFile_1_1Stream_1a6447dbb7e92159a11dae90b639caa020" kindref="member">Read</ref>(T<sp/>&amp;&amp;output,<sp/>A&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>Deserialiser&lt;T,<sp/>UsedEndian&gt;(</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>)(std::forward&lt;A&gt;(args)...);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;T&gt;(output);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Input,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>Detail::Concept::HasInternalSerialiserImpl&lt;Input,<sp/><ref refid="classFile_1_1Stream_1acde58f4d92fc8bd8661b6bb015276ee7" kindref="member">UsedEndian</ref>,<sp/>Args...&gt;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classFile_1_1Stream_1ad82d3b2fdf0c0b49c942a9040dfafe23" kindref="member">Write</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Input<sp/>&amp;input,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>Input::template<sp/>Serialiser&lt;UsedEndian&gt;(</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>input,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>)(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Input,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>Detail::Concept::HasExternalSerialiserImpl&lt;Input,<sp/><ref refid="classFile_1_1Stream_1acde58f4d92fc8bd8661b6bb015276ee7" kindref="member">UsedEndian</ref>,<sp/>Args...&gt;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classFile_1_1Stream_1ad82d3b2fdf0c0b49c942a9040dfafe23" kindref="member">Write</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Input<sp/>&amp;input,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>Serialiser&lt;Input,<sp/>UsedEndian&gt;(</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>input,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>)(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;Detail::Concept::Simple<sp/>Simple&gt;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>std::uint64_t<sp/>UpdateData()<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>std::ranges::distance(</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_-&gt;begin(),<sp/>current_</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::ranges::distance(current_,<sp/>data_-&gt;end())<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Simple))<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_-&gt;resize(<ref refid="classFile_1_1Stream_1a77d971a6a2418708ac79d1864ba1bff5" kindref="member">Length</ref>()<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Simple));</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offset;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal">};</highlight></codeline>
<codeline lineno="595"><highlight class="normal">};</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/file/stream.h"/>
  </compounddef>
</doxygen>
